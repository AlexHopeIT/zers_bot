from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext

from utils import our_works_dir_scan
from content.services_data import SERVICES


async def main_menu_keyboard():
    '''–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é'''
    builder = InlineKeyboardBuilder()

    builder.button(
        text='–£—Å–ª—É–≥–∏',
        callback_data='services'
    )
    builder.button(
        text='–ü—Ä–æ–¥—É–∫—Ü–∏—è',
        callback_data='products'
    )
    builder.button(
        text='–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã',
        callback_data='our_works'
    )
    builder.button(
        text='–û –∫–æ–º–ø–∞–Ω–∏–∏',
        callback_data='company'
    )
    builder.button(
        text='–ö–æ–Ω—Ç–∞–∫—Ç—ã',
        callback_data='contacts'
    )
    builder.button(
        text='FAQ',
        callback_data='faq'
    )
    builder.button(
        text='–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É',
        callback_data='leave_a_request'
    )

    builder.adjust(2)
    return builder.as_markup()


async def our_works_keyboard(page: int = 0, per_page: int = 5):
    builder = InlineKeyboardBuilder()
    all_works_map = our_works_dir_scan()
    all_works_ids = list(all_works_map.keys())
    total_works = len(all_works_ids)

    start_index = page * per_page
    end_index = start_index + per_page

    current_ids = all_works_ids[start_index:end_index]

    for work_id in current_ids:
        builder.button(
            text=all_works_map[work_id],
            callback_data=f'show_work:{work_id}'
        )

    builder.adjust(1)

    nav_buttons = []
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(
                text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'works_page:{page -  1}'
            )
        )
    if end_index < total_works:
        nav_buttons.append(
            InlineKeyboardButton(
                text='–î–∞–ª–µ–µ ‚û°Ô∏è', callback_data=f'works_page:{page +  1}'
            )
        )
    if nav_buttons:
        builder.row(*nav_buttons)

    builder.row(InlineKeyboardButton(
        text='‚ìÇÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu_inline'
    ))
    return builder.as_markup()


def back_to_works_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ä–∞–±–æ—Ç'."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ä–∞–±–æ—Ç',
        callback_data='our_works'
    )
    return builder.as_markup()


async def faq_keyboard():
    builder = InlineKeyboardBuilder()

    builder.button(
        text='–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–æ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π',
        callback_data='general_questions'
    )

    builder.button(
        text='–û—Å–≤–µ—â–µ–Ω–∏–µ —Å–∞–¥–æ–≤–æ-–ø–∞—Ä–∫–æ–≤–æ–µ',
        callback_data='gardening_and_park'
    )

    builder.button(
        text='–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ (—Å—Ç–∞–¥–∏–æ–Ω—ã, –ø–ª–æ—â–∞–¥–∫–∏, —Ñ–∏—Ç–Ω–µ—Å-–∑–æ–Ω—ã)',
        callback_data='sport'
    )

    builder.button(
        text='–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ-–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ (—Ñ–∞—Å–∞–¥—ã, –ø–∞–º—è—Ç–Ω–∏–∫–∏)',
        callback_data='architectural_and_artistic'
    )

    builder.button(
        text='–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ',
        callback_data='industrial'
    )

    builder.button(
        text='–£–ª–∏—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ',
        callback_data='street'
    )

    builder.button(
        text='–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ. –û—Ñ–∏—Å–Ω–æ–µ –∏ —Ç–æ—Ä–≥–æ–≤–æ–µ',
        callback_data='inside'
    )

    builder.button(
        text='‚ìÇÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        callback_data='main_menu_inline'
    )

    builder.adjust(1)
    return builder.as_markup()


def back_to_faq_keyboard():
    builder = InlineKeyboardBuilder()

    builder.button(
        text='‚ìÇÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        callback_data='main_menu_inline'
    )
    builder.adjust(1, 2, 1)
    return builder.as_markup()


async def get_admin_menu_keyboard():
    builder = InlineKeyboardBuilder()

    builder.button(
        text='üîî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏',
        callback_data='show_all_requests_1'
    )
    builder.button(
        text='‚è≥ –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ',
        callback_data='show_unanswered_requests_1'
    )
    builder.button(
        text='‚úÖ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ',
        callback_data='show_answered_requests_1'
    )
    builder.button(
        text='‚ìÇÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        callback_data='main_menu_inline'
    )

    builder.adjust(1, 2, 1)
    return builder.as_markup()


def get_requests_keyboard(current_requests, page, total_pages, filter_type):
    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text='< –ù–∞–∑–∞–¥',
                callback_data=f'show_{filter_type}_requests_{page - 1}'
                )
                )
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton(
                text='–í–ø–µ—Ä—ë–¥ >',
                callback_data=f'show_{filter_type}_requests_{page + 1}'
                )
                )

    back_button = [
        InlineKeyboardButton(
            text='‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é', callback_data='admin_menu'
            )
            ]

    request_buttons = []
    for req in current_requests:
        status_text = '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å' if not req.answered else '‚ùå –°–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫—É'
        request_buttons.append(
            [InlineKeyboardButton(
                text=f'{status_text} ID {req.id}',
                callback_data=f'toggle_answered_{req.id}_{"true" if not req.answered else "false"}'
            )]
        )

    return InlineKeyboardMarkup(
        inline_keyboard=[nav_buttons] + request_buttons + [back_button]
    )


async def services_keyboard():
    builder = InlineKeyboardBuilder()

    for service_id, service_info in SERVICES.items():
        builder.button(
            text=service_info['title'],
            callback_data=f'service_{service_id}'
        )
    builder.button(
        text='‚ìÇÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        callback_data='main_menu_inline'
    )
    builder.adjust(1)
    return builder.as_markup()
