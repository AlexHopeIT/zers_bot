import os
from aiogram import Router, types, F
from aiogram.exceptions import TelegramBadRequest, TelegramAPIError
from aiogram.fsm.context import FSMContext
from keyboards.inline_kbs import (
    main_menu_keyboard, our_works_keyboard, back_to_works_keyboard,
    faq_keyboard, back_to_faq_keyboard
    )
from utils import (
    get_work_data, our_works_dir_scan, split_message, send_or_edit_long_message
    )
from content.faq.texts import (
    GENERAL_QUESTIONS, GARDENING_AND_PARK, SPORT, ARCHITECTURAL_AND_ARTISTIC,
    INDUSTRIAL, STREET, INSIDE
    )
from states.states import LeaveARequestState
from create_db import Applications, AsyncSessionLocal

main_menu_router = Router()


@main_menu_router.callback_query(
    F.data == 'main_menu_inline'
    )
async def main_menu_inline(callback: types.CallbackQuery):
    await callback.answer()
    keyboard = await main_menu_keyboard()
    await callback.message.edit_text(
        text='–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞–∑–¥–µ–ª',
        reply_markup=keyboard
    )


@main_menu_router.callback_query(
    F.data == 'contacts'
    )
async def contacts(
    callback: types.CallbackQuery
):
    await callback.answer()

    keyboard = await main_menu_keyboard()
    contacts_text = (
        '<b>üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n'
        '<b>–û—Ñ–∏—Å:</b>\n'
        'üè¢ <b>–ê–¥—Ä–µ—Å:</b> –†–û–°–°–ò–Ø, –≥. –ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫, —É–ª. –ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∞—è, 107–ê\n'
        'üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +7 863 303 3698\n'
        'üåê <b>–°–∞–π—Ç:</b> <a href="http://www.zers-group.ru">zers-group.ru</a>\n'
        'üìß <b>–ü–æ—á—Ç–∞:</b> <a href="mailto:zers@zers-group.ru">zers@zers-group.ru</a>\n'
        '‚è∞ <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b> –ø–Ω-–ø—Ç 09:00‚Äì18:00 (–ø–µ—Ä–µ—Ä—ã–≤ 13:00‚Äì14:00)\n\n'

        '<b>–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã:</b>\n'
        'üì± <a href="https://api.whatsapp.com/send?phone=79185443910">WhatsApp</a>\n\n'

        '<b>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ:</b>\n'
        'üü¢ <b>–û—Å–∏–ø–µ–Ω–∫–æ –ö—Å–µ–Ω–∏—è</b> ‚Äî –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä\n'
        '  üìß <a href="mailto:trade@zers-group.ru">trade@zers-group.ru</a>\n'
        '  üìû –í–Ω—É—Ç—Ä. ‚Ññ 109\n'
        'üü¢ <b>–†–µ—É–Ω–æ–≤ –ú–∞–∫—Å–∏–º</b> ‚Äî –ó–∞–º. –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞\n'
        '  üìß <a href="mailto:led@zers-group.ru">led@zers-group.ru</a>\n'
        '  üìû –í–Ω—É—Ç—Ä. ‚Ññ 107\n\n'

        '<b>–ü—Ä–∏–µ–º–Ω–∞—è:</b>\n'
        'üü¢ <b>–ê–º–µ–ª–∏–Ω–∞ –ö—Ä–∏—Å—Ç–∏–Ω–∞</b>\n'
        '  üìß <a href="mailto:zers@zers-group.ru">zers@zers-group.ru</a>\n'
        '  üìû –í–Ω—É—Ç—Ä. ‚Ññ 101\n\n'

        '<b>–ü—Ä–æ–µ–∫—Ç–Ω—ã–π –æ—Ç–¥–µ–ª:</b>\n'
        'üü¢ <b>–ò–≥–æ—Ä—å –õ–µ–≤—á–µ–Ω–∫–æ</b>\n'
        '  üìß <a href="mailto:svet@zers-group.ru">svet@zers-group.ru</a>\n'
        '  üìû –í–Ω—É—Ç—Ä. ‚Ññ 105\n\n'

        '<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n'
        '–û–û–û "–¶–µ—Ä—Å –î–∏–∑–∞–π–Ω"\n'
        '<b>–ò–ù–ù/–ö–ü–ü:</b> 6163142891 / 616301001\n'
        '<b>–û–ì–†–ù:</b> 1156196061317\n'
        '<b>–†/—Å:</b> 40702810195250102743\n'
        '<b>–ë–∞–Ω–∫:</b> –§–ò–õ–ò–ê–õ –Æ–ñ–ù–´–ô –ü–ê–û –ë–ê–ù–ö–ê "–§–ö –û–¢–ö–†–´–¢–ò–ï"\n'
        '<b>–ö/—Å:</b> 30101810560150000061\n'
        '<b>–ë–ò–ö:</b> 046015061\n'
    )

    await callback.message.edit_text(
        contacts_text, parse_mode='HTML',
        reply_markup=keyboard
    )


@main_menu_router.callback_query(
    F.data == 'our_works'
    )
async def show_works_list(callback: types.CallbackQuery):
    '''–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ "–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã"'''
    await callback.answer()

    keyboard = await our_works_keyboard()

    await callback.message.answer(
        '‚ú® –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç:',
        reply_markup=keyboard
    )


@main_menu_router.callback_query(
    F.data.startswith('works_page:')
    )
async def paginate_works(callback: types.CallbackQuery):
    '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç'''
    await callback.answer()
    page = int(callback.data.split(':')[1])
    keyboard = await our_works_keyboard(page=page)
    await callback.message.edit_reply_markup(reply_markup=keyboard)


@main_menu_router.callback_query(
    F.data.startswith('show_work:')
    )
async def show_single_work(callback: types.CallbackQuery):
    await callback.answer()
    work_id = int(callback.data.split(':')[1])
    all_works_map = our_works_dir_scan()
    work_name = all_works_map.get(work_id)

    keyboard = back_to_works_keyboard()
    if not work_name:
        await callback.message.answer('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    description, photos = get_work_data(work_name)

    if not photos:
        await callback.message.answer('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —ç—Ç–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
        return

    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except TelegramAPIError:
        pass

    is_description_long = len(description) > 1024
    caption = description if not is_description_long else None

    if len(photos) > 1:
        media_group = [
            types.InputMediaPhoto(
                media=types.FSInputFile(photos[0]), caption=caption
                )
        ]
        media_group.extend(
            [types.InputMediaPhoto(
                media=types.FSInputFile(p)
                ) for p in photos[1:]]
        )

        try:
            await callback.message.answer_media_group(media=media_group)
        except TelegramBadRequest:
            await callback.message.answer(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.'
                )
    else:
        photo = types.FSInputFile(photos[0])
        await callback.message.answer_photo(photo, caption=caption)

    if description and (
        is_description_long or (len(photos) == 1 and not description)
            ):

        desc_parts = split_message(description)
        for part in desc_parts:
            await callback.message.answer(text=part)

    await callback.message.answer('.', reply_markup=keyboard)


@main_menu_router.callback_query(F.data == 'company')
async def company_info(callback: types.CallbackQuery):
    await callback.answer()

    info_path = '../app/content/company/about_us.txt'

    if not os.path.exists(info_path):
        await callback.message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        return

    with open(info_path, 'r', encoding='utf-8') as f:
        company_info_full = f.read()

    keyboard = await main_menu_keyboard()
    await send_or_edit_long_message(
        callback,
        company_info_full,
        keyboard
    )


@main_menu_router.callback_query(
    F.data == 'faq'
    )
async def faq(callback: types.CallbackQuery):
    await callback.answer()
    keyboard = await faq_keyboard()
    await callback.message.edit_text(
        'üìå –í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
        reply_markup=keyboard
    )


@main_menu_router.callback_query(
    F.data == 'general_questions'
    )
async def general_questions(callback: types.CallbackQuery):
    await callback.answer()
    keyboard = back_to_faq_keyboard()
    await send_or_edit_long_message(
        callback,
        GENERAL_QUESTIONS,
        keyboard
    )


@main_menu_router.callback_query(
    F.data == 'gardening_and_park'
    )
async def gardening_and_park(callback: types.CallbackQuery):
    await callback.answer()
    keyboard = back_to_faq_keyboard()
    await send_or_edit_long_message(
        callback,
        GARDENING_AND_PARK,
        keyboard
    )


@main_menu_router.callback_query(
    F.data == 'sport'
    )
async def sport(callback: types.CallbackQuery):
    await callback.answer()
    keyboard = back_to_faq_keyboard()
    await send_or_edit_long_message(
        callback,
        SPORT,
        keyboard
    )


@main_menu_router.callback_query(
    F.data == 'architectural_and_artistic'
    )
async def architectural_and_artistic(callback: types.CallbackQuery):
    await callback.answer()
    keyboard = back_to_faq_keyboard()
    await send_or_edit_long_message(
        callback,
        ARCHITECTURAL_AND_ARTISTIC,
        keyboard
    )


@main_menu_router.callback_query(
    F.data == 'industrial'
    )
async def industrial(callback: types.CallbackQuery):
    await callback.answer()
    keyboard = back_to_faq_keyboard()
    await send_or_edit_long_message(
        callback,
        INDUSTRIAL,
        keyboard
    )


@main_menu_router.callback_query(
    F.data == 'street'
    )
async def street(callback: types.CallbackQuery):
    await callback.answer()
    keyboard = back_to_faq_keyboard()
    await send_or_edit_long_message(
        callback,
        STREET,
        keyboard
    )


@main_menu_router.callback_query(
    F.data == 'inside'
    )
async def inside(callback: types.CallbackQuery):
    await callback.answer()
    keyboard = back_to_faq_keyboard()
    await send_or_edit_long_message(
        callback,
        INSIDE,
        keyboard
    )
